# -*- coding: latin-1 -*-
# generated by wxGlade 0.4cvs on Thu Sep  1 12:47:22 2005

import wx
import tocador
from ConfigSerial import ConfigSerial

# begin wxGlade: dependencies
# end wxGlade

ID_SAIR = wx.NewId()
ID_CONFIG = wx.NewId()
ID_COMUNIC = wx.NewId()
ID_SOBRE = wx.NewId()
	
class JanelaPrincipal(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: JanelaPrincipal.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizerSaida_staticbox = wx.StaticBox(self, -1, u"Saída")
        self.sizerHistorico_staticbox = wx.StaticBox(self, -1, u"Histórico")
        self.sizerEntrada_staticbox = wx.StaticBox(self, -1, "Entrada")
        
        # Menu Bar
        self.janela_menubar = wx.MenuBar()
        self.SetMenuBar(self.janela_menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_CONFIG, "Confi&gurar...", "Ajusta detalhes da porta serial", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_COMUNIC, "&Comunicar", u"Inicia/Interrompe comunicação", wx.ITEM_CHECK)
        self.janela_menubar.Append(wxglade_tmp_menu, u"&Comunicação")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_SOBRE, "So&bre...", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_SAIR, "&Sair", "", wx.ITEM_NORMAL)
        self.janela_menubar.Append(wxglade_tmp_menu, "&Geral")
        # Menu Bar end
        self.janela_statusbar = self.CreateStatusBar(7, wx.ST_SIZEGRIP)
        
        # Tool Bar
        self.janela_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT|wx.TB_DOCKABLE)
        self.SetToolBar(self.janela_toolbar)
        self.janela_toolbar.AddLabelTool(ID_CONFIG, "Configurar...", wx.Bitmap("lib/Config.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Configurar...", "Ajusta detalhes da porta serial")
        self.janela_toolbar.AddLabelTool(ID_COMUNIC, "Comunicar", wx.Bitmap("lib/Parado.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_CHECK, "Comunicar", u"Inicia/Interrompe comunicação")
        self.janela_toolbar.AddSeparator()
        self.janela_toolbar.AddLabelTool(ID_SOBRE, "Sobre...", wx.Bitmap("lib/Info.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Sobre...", u"Informações sobre o HandTalks!")
        self.janela_toolbar.AddLabelTool(ID_SAIR, "Sair", wx.Bitmap("lib/Fechar.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Sair", "Fecha o HandTalks!")
        # Tool Bar end
        self.comando = wx.TextCtrl(self, -1, "")
        self.enviar = wx.BitmapButton(self, -1, wx.Bitmap("lib/Enviar.png", wx.BITMAP_TYPE_ANY))
        self.resposta = wx.TextCtrl(self, -1, "", style=wx.TE_READONLY)
        self.caixaLetras = wx.Choice(self, -1, choices=[])
        self.letraExibida = wx.StaticText(self, -1, "A", style=wx.ALIGN_CENTRE|wx.ST_NO_AUTORESIZE)
        self.historico = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.configuraSerial, id=ID_CONFIG)
        self.Bind(wx.EVT_MENU, self.alternaComunicacao, id=ID_COMUNIC)
        self.Bind(wx.EVT_MENU, self.sobreHandtalks, id=ID_SOBRE)
        self.Bind(wx.EVT_MENU, self.sair, id=ID_SAIR)
        self.Bind(wx.EVT_TOOL, self.configuraSerial, id=ID_CONFIG)
        self.Bind(wx.EVT_TOOL, self.alternaComunicacao, id=ID_COMUNIC)
        self.Bind(wx.EVT_TOOL, self.sobreHandtalks, id=ID_SOBRE)
        self.Bind(wx.EVT_TOOL, self.sair, id=ID_SAIR)
        self.Bind(wx.EVT_TEXT_ENTER, self.enviarComando, self.comando)
        self.Bind(wx.EVT_BUTTON, self.enviarComando, self.enviar)
        self.Bind(wx.EVT_CHOICE, self.trocouLetra, self.caixaLetras)
        # end wxGlade

        # Mais eventos
        self.Bind(wx.EVT_CLOSE, self.fechaAplicacao)

        # Associa um Ícone
        ib = wx.IconBundle()
        ib.AddIconFromFile("lib/handtalks.ico",wx.BITMAP_TYPE_ANY)
        self.SetIcons(ib)        
        

    def __set_properties(self):
        # begin wxGlade: JanelaPrincipal.__set_properties
        self.SetTitle("Hand Talks!")
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.janela_statusbar.SetStatusWidths([-1, 60, 50, 20, 20, 20, 20])
        # statusbar fields
        janela_statusbar_fields = ["", "Porta 0", "9600", "8", "N", "1", ""]
        for i in range(len(janela_statusbar_fields)):
            self.janela_statusbar.SetStatusText(janela_statusbar_fields[i], i)
        self.janela_toolbar.SetToolBitmapSize((16, 16))
        self.janela_toolbar.Realize()
        self.comando.SetToolTipString(u"Digite um comando para enviar à luva")
        self.enviar.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.enviar.SetToolTipString("Enviar Comando")
        self.enviar.SetSize(self.enviar.GetBestSize())
        self.resposta.SetToolTipString("Resposta da luva")
        self.caixaLetras.SetSelection(0)
        self.letraExibida.SetFont(wx.Font(200, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.historico.SetToolTipString(u"Histórico da comunicação com a luva")
        # end wxGlade

        # Popula a caixa de letras
        self.caixaLetras.AppendItems( [chr (ord('A') + x) for x in range (26)] )
        self.caixaLetras.Select(0)


    def __do_layout(self):
        # begin wxGlade: JanelaPrincipal.__do_layout
        sizerJanela = wx.BoxSizer(wx.HORIZONTAL)
        sizerHistorico = wx.StaticBoxSizer(self.sizerHistorico_staticbox, wx.VERTICAL)
        sizerPrincipal = wx.BoxSizer(wx.VERTICAL)
        sizerSaida = wx.StaticBoxSizer(self.sizerSaida_staticbox, wx.VERTICAL)
        sizerEntrada = wx.StaticBoxSizer(self.sizerEntrada_staticbox, wx.HORIZONTAL)
        sizerEntrada.Add(self.comando, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerEntrada.Add(self.enviar, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerEntrada.Add(self.resposta, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerEntrada.Add(self.caixaLetras, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.FIXED_MINSIZE, 3)
        sizerPrincipal.Add(sizerEntrada, 0, wx.ALL|wx.EXPAND, 3)
        sizerSaida.Add((1, 1), 1, wx.ADJUST_MINSIZE, 0)
        sizerSaida.Add(self.letraExibida, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        sizerSaida.Add((1, 1), 1, wx.ADJUST_MINSIZE, 0)
        sizerPrincipal.Add(sizerSaida, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        sizerJanela.Add(sizerPrincipal, 1, wx.EXPAND, 0)
        sizerHistorico.Add(self.historico, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        sizerJanela.Add(sizerHistorico, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        self.SetAutoLayout(True)
        self.SetSizer(sizerJanela)
        sizerJanela.Fit(self)
        sizerJanela.SetSizeHints(self)
        self.Layout()
        self.Centre()
        # end wxGlade


    def configuraSerial(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        dlg = ConfigSerial (self)
        # TODO: preencher diálogo com os dados de configuração da serial
        
        if (dlg.ShowModal() == wx.ID_OK):
            # TODO: ler os dados de configuração da serial
            # TODO: Atualizar statusbar
            print "Sim!"

        dlg.Destroy()

        
    def trocouLetra(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        
        letra = self.caixaLetras.GetStringSelection()
        
        self.letraExibida.SetLabel (letra)
        self.janela_statusbar.SetStatusText(number=0, text=u'Reproduzindo Áudio...')
	
        if not self.IsMaximized():
            self.GetSizer().SetSizeHints(self)
            self.Refresh()
            self.Update()
        
        if tocador.toca_tudo ("audio/" + letra):
            self.janela_statusbar.SetStatusText(number=0, text='')
        else:
            self.janela_statusbar.SetStatusText(number=0, text=u'Falha na execução!')


    def fechaAplicacao(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        if event.CanVeto:
            dlg = wx.MessageDialog(self, u"Tem certeza que deseja sair?",
                                   u'Confirmação',
                                   wx.YES_NO | wx.ICON_QUESTION
                                   )
            veta = dlg.ShowModal() == wx.ID_NO
            dlg.Destroy()
            if veta:
                return
        self.Destroy()


    def sair(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        self.Close()


    def enviarComando(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        event.Skip()


    def digitouComando(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        event.Skip()


    def alternaComunicacao(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        estado = event.IsChecked()
        
        self.janela_toolbar.ToggleTool (ID_COMUNIC, estado)
        self.janela_menubar.Check (ID_COMUNIC, estado)


    def sobreHandtalks(self, event): # wxGlade: JanelaPrincipal.<event_handler>
        dlg = wx.MessageDialog(self,
u"""HandTalks!

Tradutor do alfabeto LIBRAS.

Alunos: André, Hilton e Hugo.
Orientador: Prof. Jorge Kinoshita""",
                                'Sobre...', wx.OK | wx.ICON_INFORMATION )
        dlg.ShowModal()
        dlg.Destroy()

# end of class JanelaPrincipal


