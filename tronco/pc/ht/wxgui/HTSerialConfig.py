# -*- coding: latin-1 -*-
# generated by wxGlade 0.4cvs on Wed Sep 28 23:29:23 2005

import wx
import serial

# begin wxGlade: dependencies
# end wxGlade

class HTSerialConfig(wx.Dialog):
    def __init__(self, *args, **kwds):
        # Configurações da serial
        self.serial = kwds['serial']
        del kwds['serial']

        # begin wxGlade: HTSerialConfig.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.sizerFluxo_staticbox = wx.StaticBox(self, -1, "Controle de Fluxo")
        self.porta = wx.Choice(self, -1, choices=[])
        self.velocidade = wx.Choice(self, -1, choices=[])
        self.dados = wx.Choice(self, -1, choices=[])
        self.paridade = wx.Choice(self, -1, choices=[])
        self.parada = wx.Choice(self, -1, choices=[])
        self.cfHardware = wx.CheckBox(self, -1, "RTS/CTS")
        self.cfSoftware = wx.CheckBox(self, -1, "Xon/Xoff")
        self.btCancelar = wx.Button(self, wx.ID_CANCEL, "")
        self.btOk = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.pressionouOK, id=wx.ID_OK)
        # end wxGlade

        # Porta
        self.porta.Clear()
        for n in range(4):
            self.porta.Append(serial.device(n))
        self.porta.SetSelection(self.serial.port)

        # Baud
        self.velocidade.Clear()
        for n, baudrate in enumerate(self.serial.BAUDRATES):
            self.velocidade.Append(str(baudrate))
            if self.serial.baudrate == baudrate:
                self.velocidade.SetSelection(n)

        # Dados
        self.dados.Clear()
        for n, dados in enumerate(self.serial.BYTESIZES):
            self.dados.Append(str(dados))
            if self.serial.bytesize == dados:
                self.dados.SetSelection(n)

        # Paridade
        self.paridade.Clear()
        NOMES = {'N': u'Nenhuma', 'O': u'Ímpar', 'E': u'Par'}
        for n,paridade in enumerate (self.serial.PARITIES):
            self.paridade.Append(NOMES[paridade])
            if self.serial.parity == paridade:
                self.paridade.SetSelection(n)

        # Parada
        self.parada.Clear()
        for n, parada in enumerate(self.serial.STOPBITS):
            self.parada.Append(str(parada))
            if self.serial.stopbits == parada:
                self.parada.SetSelection(n)

        # Controle de Fluxo
        self.cfHardware.SetValue (self.serial.rtscts);
        self.cfSoftware.SetValue (self.serial.xonxoff);


    def __set_properties(self):
        # begin wxGlade: HTSerialConfig.__set_properties
        self.SetTitle(u"Configuração da Serial")
        self.porta.SetSelection(0)
        self.velocidade.SetSelection(0)
        self.dados.SetSelection(0)
        self.paridade.SetSelection(0)
        self.parada.SetSelection(0)
        self.btOk.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: HTSerialConfig.__do_layout
        sizerJanela = wx.BoxSizer(wx.VERTICAL)
        sizerBotoes = wx.BoxSizer(wx.HORIZONTAL)
        sizerFluxo = wx.StaticBoxSizer(self.sizerFluxo_staticbox, wx.HORIZONTAL)
        sizerDados = wx.GridSizer(7, 2, 0, 0)
        label_1 = wx.StaticText(self, -1, "Porta:")
        sizerDados.Add(label_1, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerDados.Add(self.porta, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        label_2 = wx.StaticText(self, -1, "Velocidade:")
        sizerDados.Add(label_2, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerDados.Add(self.velocidade, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        label_3 = wx.StaticText(self, -1, "Bits de Dados:")
        sizerDados.Add(label_3, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerDados.Add(self.dados, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        label_4 = wx.StaticText(self, -1, "Paridade:")
        sizerDados.Add(label_4, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerDados.Add(self.paridade, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        label_5 = wx.StaticText(self, -1, "Bits de Parada:")
        sizerDados.Add(label_5, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerDados.Add(self.parada, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizerJanela.Add(sizerDados, 1, wx.EXPAND, 0)
        sizerFluxo.Add(self.cfHardware, 0, wx.ALL, 3)
        sizerFluxo.Add(self.cfSoftware, 0, wx.ALL, 3)
        sizerJanela.Add(sizerFluxo, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        linha = wx.StaticLine(self, -1)
        sizerJanela.Add(linha, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 3)
        sizerBotoes.Add(self.btCancelar, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 3)
        sizerBotoes.Add(self.btOk, 1, wx.ALL, 3)
        sizerJanela.Add(sizerBotoes, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 3)
        self.SetAutoLayout(True)
        self.SetSizer(sizerJanela)
        sizerJanela.Fit(self)
        sizerJanela.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def pressionouOK(self, event): # wxGlade: HTSerialConfig.<event_handler>
        self.serial.port     = self.porta.GetSelection()
        self.serial.baudrate = self.serial.BAUDRATES[self.velocidade.GetSelection()]
        self.serial.bytesize = self.serial.BYTESIZES[self.dados.GetSelection()]
        self.serial.stopbits = self.serial.STOPBITS[self.parada.GetSelection()]
        self.serial.parity   = self.serial.PARITIES[self.paridade.GetSelection()]
        self.serial.rtscts   = self.cfHardware.GetValue()
        self.serial.xonxoff  = self.cfSoftware.GetValue()
        self.EndModal(event.GetId())

# end of class HTSerialConfig


